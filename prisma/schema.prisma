// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ThemePreference {
  LIGHT
  DARK
  AUTO
}

model UserMeta {
  id      String @id @default(cuid())
  clerkId String @unique

  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  Note              Note[]
  Tag               Tag[]
  WalletRequisition WalletRequisition[]
  WalletAccount     WalletAccount[]

  deletedAt DateTime?
}

model Tag {
  id   String @id @default(cuid())
  name String

  notes Note[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  userMeta   UserMeta @relation(fields: [userMetaId], references: [id])
  userMetaId String
}

model Note {
  id      String @id @default(cuid())
  content String

  tags Tag[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  UserMeta   UserMeta @relation(fields: [userMetaId], references: [id])
  userMetaId String
}

model WalletRequisition {
  id            String @id @default(cuid())
  requisitionId String @unique
  agreementId   String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  WalletAccount WalletAccount[]
  UserMeta      UserMeta        @relation(fields: [userMetaId], references: [id])
  userMetaId    String
}

model WalletAccount {
  id            String            @id @default(cuid())
  accountId     String            @unique
  requisition   WalletRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  balance       String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  WalletTransaction WalletTransaction[]
  UserMeta          UserMeta            @relation(fields: [userMetaId], references: [id])
  userMetaId        String
}

model WalletAccountResource {
  id              String   @id @default(cuid())
  resourceId      String
  cashAccountType String
  currency        String?
  name            String?
  displayName     String?
  details         String?
  iban            String?
  status          String?
  product         String?
  usage           String?
  linkedAccounts  String[]
}

model WalletTransaction {
  id            String @id @default(cuid())
  transactionId String @unique
  status        String

  bookingDate       String
  valueDate         String
  bookingDateTime   DateTime
  valueDateTime     DateTime
  transactionAmount String
  currency          String

  sourceCurrency String?
  targetCurrency String?
  exchangeRate   String?

  proprietaryBankTransactionCode String?
  creditorName                   String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  walletAccount   WalletAccount @relation(fields: [walletAccountId], references: [id])
  walletAccountId String
}
