{
  "version": 3,
  "sources": ["../../../../../node_modules/@saas-ui/react/node_modules/@saas-ui/provider/src/saas-provider.tsx", "../../../../../node_modules/@saas-ui/react/node_modules/@saas-ui/provider/src/router-provider.tsx", "../../../../../node_modules/@saas-ui/react/node_modules/@saas-ui/provider/src/use-link.tsx"],
  "sourcesContent": ["import * as React from 'react'\n\nimport { ChakraProvider, ChakraProviderProps } from '@chakra-ui/react'\n\nimport { theme as defaultTheme } from '@saas-ui/theme'\n\nexport interface SaasContextValue {\n  linkComponent?: React.ElementType<any>\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void\n}\n\nexport const SaasContext = React.createContext<SaasContextValue>({})\n\ninterface SaasProviderProps extends ChakraProviderProps {\n  theme?: any\n  linkComponent?: React.ElementType<any>\n  children: React.ReactNode\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void\n}\n\nexport function SaasProvider({\n  theme,\n  linkComponent,\n  onError,\n  children,\n  ...rest\n}: SaasProviderProps) {\n  const context = {\n    linkComponent,\n    onError,\n  }\n\n  return (\n    <SaasContext.Provider value={context}>\n      <ChakraProvider {...rest} theme={theme || defaultTheme}>\n        {children}\n      </ChakraProvider>\n    </SaasContext.Provider>\n  )\n}\n\nexport const useSaas = (): SaasContextValue => React.useContext(SaasContext)\n", "import * as React from 'react'\nimport type { ParsedUrlQuery } from 'querystring'\n\ninterface NavigateOptions {\n  replace?: boolean\n}\n\ninterface RouterLocation {\n  pathname: string\n  hash?: string\n  search?: string\n}\n\nexport interface RouterContextValue {\n  navigate: (path: string, options?: NavigateOptions) => void\n  back: () => void\n  params?: ParsedUrlQuery\n  location?: RouterLocation\n  route?: string\n}\n\nexport const RouterContext = React.createContext<RouterContextValue | null>(\n  null\n)\n\n/**\n * A simple to wrapper to abstract basic router functionality\n */\nexport const RouterProvider = RouterContext.Provider\n\nexport const useRouterContext = () =>\n  React.useContext(RouterContext) as RouterContextValue\n\nexport const useNavigate = () => {\n  const context = useRouterContext()\n  return context?.navigate\n}\n\nexport const useParams = () => {\n  const context = useRouterContext()\n  return context?.params\n}\n\nexport const useLocation = () => {\n  const context = useRouterContext()\n  if (context) {\n    return context.location\n  } else if (typeof window !== 'undefined') {\n    return window.location\n  }\n  return null\n}\n\nexport interface UseActivePathOptions {\n  /**\n   * Set to false to match the first parth of the path.\n   * eg: /contacts will match /contacts/people\n   */\n  end?: boolean\n}\n\n/**\n * Matches the given path to the current active path.\n * @param path string\n * @param options UseActivePathOptions\n * @returns boolean\n */\nexport function useActivePath(\n  path: string,\n  options: UseActivePathOptions = {}\n) {\n  const { end = true } = options\n  const location = useLocation()\n  return !!React.useMemo(\n    () => location?.pathname.match(new RegExp(`${path}${end ? '$' : ''}`)),\n    [location?.pathname, path, options]\n  )\n}\n", "import React from 'react'\nimport { useSaas } from './saas-provider'\n\nconst Link: React.FC<any> = ({ children }) => <>{children}</>\n\nexport function useLink(): React.ElementType<any> {\n  const context = useSaas()\n  if (context?.linkComponent) {\n    return context.linkComponent\n  }\n  return Link\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,IAAA,CAAA,SAAA,iBAAA,WAAA,UAAA;AAAA,IAWwBC,IAASC,gBAAgC,CAAE,CAAA;AAAA,SASvCC,EAAAC,IAAAA;AAAAA,MAAAA,EAC1BC,OAAAA,IAAKC,eACLA,IAAaC,SACbA,IAAOC,UACPA,GAAAA,IACGC,IAAAA,IAAAA,SAAAA,IAAAA,IAAAA;AAAAA,QAAAA,QAAAA;AAAAA,aAAAA,CAAAA;AAAAA,QAAAA,GAAAA,GAAAA,KAAAA,CAAAA,GAAAA,KAAAA,OAAAA,KAAAA,EAAAA;AAAAA,SAAAA,IAAAA,GAAAA,IAAAA,GAAAA,QAAAA;AAAAA,MAAAA,GAAAA,QAAAA,IAAAA,GAAAA,EAAAA,KAAAA,MAAAA,GAAAA,KAAAA,GAAAA;AAAAA,WAAAA;EAAAA,EAEHL,IAAAJ,CAAAA;AAKA,SACEU,gBAACT,EAAYU,UAAS,EAAAC,OANR,EACdN,eAAAA,IACAC,SAAAA,GAAAA,EAAAA,GAKEG,gBAAAA,gBAACG,gBAAcC,EAAA,CAAA,GAAKL,GAAM,EAAAJ,OAAOA,MAASU,GAAAA,CAAAA,GACvCP,EAAAA,CAAAA;AAIT;AAEaQ,IAAAA,IAAU,MAA8BC,aAAWhB,CAAAA;AAAnDe,ICpBaE,IAAShB,gBACjC,IAAA;ADmBWc,ICnBX,IAM4BE,EAAcP;ACzB5C,IAAA,IAA4B,CAAA,EAAGQ,UAAAA,GAAAA,MAAeC,6BAAAA,QAAGD,cAAAA,aAAAA,QAAAA,UAAAA,MAAAA,EAAAA;AAAAA,SAAAA,IAAAA;AAG/C,QAAaE,KAAGC,EAAAA;AAChB,SAAW,QAAPD,MAAAA,GAASE,gBAAAA,GACIA,gBAGnBC;AAAA;",
  "names": ["_excluded", "SaasContext", "createContext", "SaasProvider", "_ref", "theme", "linkComponent", "onError", "children", "rest", "React", "Provider", "value", "ChakraProvider", "_extends", "defaultTheme", "useSaas", "useContext", "RouterContext", "children", "React", "context", "useSaas", "linkComponent", "Link"]
}
